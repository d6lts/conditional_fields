<?php
// $Id$

// Fields settings
define ('C_FIELDS_JS_NO', 0);
define ('C_FIELDS_JS_HIDE', 1);
define ('C_FIELDS_JS_DISABLE', 2);

define ('C_FIELDS_ANIMATION_NO', 0);
define ('C_FIELDS_ANIMATION_FADE', 1);
define ('C_FIELDS_ANIMATION_SLIDE', 2);

define ('C_FIELDS_ORPHANED_HIDE', 0);
define ('C_FIELDS_ORPHANED_SHOW_TRIGGERED', 1);
define ('C_FIELDS_ORPHANED_SHOW_ALL', 2);

function conditional_fields_help($path, $arg) {
switch ($path) {
  case 'admin/content/types/%/conditional':
    return t('These settings only apply to the conditional fields of this content type.');
    break;
  }
}

/**
 * Implementation of hook_menu().
 */
function conditional_fields_menu() {
  $items = array();
  
  foreach (node_get_types() as $type) {
    $type_name = $type->type;
    $content_type = content_types($type_name);
    $type_url_str = $content_type['url_str'];
  
    $items['admin/content/node-type/' . $type_url_str . '/conditional'] = array(
      'title' => 'Conditional fields',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_conditional_fields_admin', $type_name),
      'access arguments' => array('administer conditional fields'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 5
      );
  }
  
  return $items;
}

/**
 * Implementation of hook_perm()
 */
function conditional_fields_perm() {
  return array('administer conditional fields');
}

/**
 *  Administration form for conditional fields
 */
function _conditional_fields_admin($form, $type) {
  $form = array();
  
  $form['js_set'] = array(
    '#type' => 'fieldset',
    '#title' => t('User Interface options'),
    '#collapsible' => TRUE
  ); 
  $form['js_set']['js'] = array(
    '#type' => 'radios',
    '#options' => array(
      C_FIELDS_JS_NO => t("Don't use javascript. Fields are only hidden on node view."), 
      C_FIELDS_JS_HIDE => t('Hide untriggered fields.'), 
      C_FIELDS_JS_DISABLE => t('Disable untriggered fields.')
    ),
    '#title' => 'Javascript',
    '#description' => t('Choose the desired javascript behaviour in node editing forms.'),
    '#default_value' => variable_get('c_fields_js_' . $type, C_FIELDS_JS_HIDE)
  );  
  $form['js_set']['anim'] = array(
    '#type' => 'fieldset',
    '#title' => t('Animation'),
    '#description' => t("These settings have effect only if you select the 'Hide untriggered fields' option above."),
  ); 
  $form['js_set']['anim']['animation'] = array(
    '#type' => 'radios',
    '#title' => t('Type'),
    '#default_value' => variable_get('c_fields_animation_' . $type, C_FIELDS_ANIMATION_NO),
    '#options' => array(
      C_FIELDS_ANIMATION_NO => t('No animation'),
      C_FIELDS_ANIMATION_FADE => t('Slide down'),
      C_FIELDS_ANIMATION_SLIDE => t('Fade'),
     ),
  );
  $form['js_set']['anim']['anim_speed'] = array(
    '#type' => 'radios',
    '#title' => t('Speed'),
    '#description' => t('The speed at which the animation is performed. Slow = 600ms; Normal = 400ms; Fast = 200ms.'),
    '#default_value' => variable_get('c_fields_anim_speed_' . $type, 'normal'),
    '#options' => array(
      'slow' => t('Slow'),
      'normal' => t('Normal'),
      'fast' => t('Fast'),
     ),
  );
  $form['orphaned'] = array(
    '#type' => 'fieldset',
    '#title' => t('Orphaned controlled fields settings'),
    '#description' => t('Configure the visibility/editability of controlled fields whose controlling fields are not visible/editable.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE
  );
  $options = array(C_FIELDS_ORPHANED_HIDE => t('Hide'), C_FIELDS_ORPHANED_SHOW_TRIGGERED => t('Show only triggered'), C_FIELDS_ORPHANED_SHOW_ALL => t('Show all'));
  $form['orphaned']['orphaned_view'] = array(
    '#type' => 'radios',
    '#title' => t('On node view'),
    '#options' => $options,
    '#default_value' => variable_get('c_fields_view_' . $type, C_FIELDS_ORPHANED_SHOW_TRIGGERED)
  );
  $form['orphaned']['orphaned_edit'] = array(
    '#type' => 'radios',
    '#title' => t('On node edit'),
    '#options' => $options,
    '#default_value' => variable_get('c_fields_edit_' . $type, C_FIELDS_ORPHANED_SHOW_TRIGGERED)
  );
  $form['show_all'] = array(
    '#type' => 'checkbox',
    '#title' => t('Administrators see all fields'),
    '#description' => t('Select this box to let users with the <a href="@access-control-page">administer conditional fields</a> permission to view all controlled fields of a node.', array('@access-control-page' => url('admin/user/permissions', array('fragment' => 'module-conditional_fields')))),
    '#default_value' => variable_get('c_fields_show_all_' . $type, 0)
  );
  $form['reset'] = array(
    '#type' => 'checkbox',
    '#title' => t('Reset'),
    '#description' => t('Delete all conditional fields configured for this content type. This will delete the conditional fields settings, not the fields themselves.'),
    '#default_value' => 0
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

function _conditional_fields_admin_submit($form, &$form_state) {
  $type = $form['#parameters'][2];
  
  if ($form_state['values']['reset'] == 1) {
    conditional_fields_node_type_delete($type);
    $message = t(' All configured conditional fields have been deleted.');
  }
  
  variable_set('c_fields_js_' . $type, $form_state['values']['js']);  
  variable_set('c_fields_animation_' . $type, $form_state['values']['animation']);
  variable_set('c_fields_anim_speed_' . $type, $form_state['values']['anim_speed']);
  variable_set('c_fields_view_' . $type, $form_state['values']['orphaned_view']);
  variable_set('c_fields_edit_' . $type, $form_state['values']['orphaned_edit']);
  variable_set('c_fields_show_all_' . $type, $form_state['values']['show_all']);

  drupal_set_message(t('Conditional fields options for this content type saved.') . $message);
}

/**
 * Implementation of hook_nodeapi()
 */
function conditional_fields_nodeapi(&$node, $op, $teaser, $page) {
  if ($op == 'view') {
    // First we check if there any conditional fields in this node type
    $type = content_types($node->type);
    if (!$data = conditional_fields_load_data($type['type'])) {
      return;
    }
    
    // Then we check if user is an administrator and this content type
    // and has the show hidden fields pref enabled
    if (user_access('administer conditional fields') && variable_get('c_fields_show_all_' . $type['type'], 0)) {
      return;
    }
    
    $orphaned_settings = variable_get('c_fields_view_' . $node->type, C_FIELDS_ORPHANED_SHOW_TRIGGERED);
    
    foreach ($data as $field) {
      // Check if we must look for the controlling field in a group
      if (module_exists('fieldgroup')) {
        $group = fieldgroup_get_group($node->type, $field['control_field_name']);
      }
      else {
        $group = FALSE;
      }
      
      // Check if the controlling field is viewed
      $viewed = FALSE;
      if ($group && !empty($node->content[$group][$field['control_field_name']]['#value'])) {
        $viewed = TRUE;
      }
      if (!$group && !empty($node->content[$field['control_field_name']]['#value'])) {
        $viewed = TRUE;
      }
      
      // Create an array with the selected controlling field's values
      $current_values = array();
      foreach ($node->{$field['control_field_name']} as $value) {
         $current_values[] = $value['value'];
      }

      if ($viewed) {
        // Hide the controlled field if it is not triggered
        if (!conditional_fields_is_triggered($current_values, $field['trigger_values'])) {
          if ($group) {
            unset($node->content[$group][$field['field_name']]);
            $changed_groups[$group] = $group;
          }
          else {
            unset($node->content[$field['field_name']]);
          }
        }
      }
      else {
        // Apply orphaned fields settings
        switch ($orphaned_settings) {
          case C_FIELDS_ORPHANED_SHOW_TRIGGERED:
            // If the field was triggered, don't hide it
            if (conditional_fields_is_triggered($current_values, $field['trigger_values'])) {
              break;
            }
          case C_FIELDS_ORPHANED_HIDE:
            // We hide the field
            if ($group) {
              unset($node->content[$group][$field['field_name']]);
              $changed_groups[$group] = $group;
            }
            else {
              unset($node->content[$field['field_name']]);
            }
          case C_FIELDS_ORPHANED_SHOW_ALL:
            // Nothing to do...
            break;
        }
      }
    }
        
    // If a group is now empty, we should hide it too
    foreach ((array)$changed_groups as $group) {
      $keep = FALSE;
      foreach ((array)$node->content[$group] as $key => $group_content) {
        if (substr($key, 0, 6) == 'field_' && $group_content['#value'] !== '') {
          $keep = TRUE;
        }
      }
      if ($keep == FALSE) {
        unset($node->content[$group]);
      }
    }
  }
}

/**
 * Implementation of hook_form_alter()
 */
function conditional_fields_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'content_field_edit_form':
      conditional_fields_content_admin_field($form);
      break;
    case 'fieldgroup_group_edit_form':
      conditional_fields_fieldgroup_group_edit_form($form);
      break;
    case 'content_field_overview_form':
      // Find conditional fields, mark them, and disable group select for them      
      $conditional_fields = conditional_fields_field_overview_form($form);    
      break;
    case '_content_admin_field_remove':
      $form['#submit'] = $form['#submit'] + array('_conditional_fields_content_admin_field_remove_submit' => array());
      break;
    case 'fieldgroup_remove_group':
      $form['#submit'] = $form['#submit'] + array('_conditional_fields_fieldgroup_remove_group_submit' => array('group_name' => arg(5)));
      break;
    case $form['type']['#value'] . '_node_form':
      conditional_fields_node_editing_form($form);
      break;
  }
}

/**
 * Alteration of the field editing form
 */
function conditional_fields_content_admin_field(&$form) {
  $type = array();
  $type = content_types($form['type_name']['#value']);
  
  // Load conditional fields data.
  $data = conditional_fields_load_data($type['type']);

  // Get all fields controlled by this one.
  $controlled_fields = array();
  foreach ($data as $row) {
    if ($row['control_field_name'] == $form['field_name']['#value']) {
      $controlled_fields[$row['field_name']] = $row['trigger_values'];
    }
  }
  
  // Add extra validation funcion
  $form['#validate'] = array_merge(array('conditional_fields_content_admin_field_validate'), $form['#validate']);
  
  $form['#controlled_fields'] = $controlled_fields;

  // Check if field is in a group
  if (module_exists('fieldgroup')) {
    $controlled_field_in_group = fieldgroup_get_group($form['type_name']['#value'], $form['field_name']['#value']);
  }

  // Get available fields, which are:
  foreach ($type['fields'] as $field) {
    // - Not this one :)
    if ($field['field_name'] == $form['field_name']['#value']) {
      continue;
    }
    // - AND not controlled by this one
    if ($controlled_fields[$field['field_name']]) {
      continue;
    }
    // - AND fields not in a group (if this field isn't in a group), or fields in the same group.
    if (isset($controlled_field_in_group)) {
      if ($controlled_field_in_group != fieldgroup_get_group($field['type_name'], $field['field_name'])) {
        continue;
      }
    }
    // - AND with Allowed values
    if (!$allowed_values[$field['field_name']] = conditional_fields_allowed_values($field)) {
      continue;
    }
    $available_fields[$field['field_name']] = $field;
  }

  if (isset($available_fields)) {
    // Add controlled fields notice
    if (!empty($controlled_fields)) {
      foreach ($controlled_fields as $field => $trigger_values) {
        if (substr($field, 0, 6) == 'group_') { // It's a group
          $rows[] = array($field, t('group'), '<a href="' . url('admin/content/node-type/' . $type['type'] . '/groups/' . $field, array('fragment' => 'conditional-fields-settings')) . '">' . t('edit') . '</a>');
        }
        else { // It's a field
          $rows[] = array($field, t('field'), '<a href="' . url('admin/content/node-type/' . $type['type'] . '/fields/' . $field, array('fragment' => 'conditional-fields-settings')) . '">' . t('edit') . '</a>');
        }
      }
    }
    
    if ($rows) {
      $description = t('<p>Below is a list of all fields and groups controlled by this field. If you want to make this field controllable, you have to clear the settings for each controlled field.</p>') . theme('table', array(t('Name'), t('Type'), t('Options')), $rows);
    }
    else {
      // Add extra submission funcion
      $form['#submit'] = array_merge(array('conditional_fields_forms_submit'), $form['#submit']);
    }
    
    $form['widget'] = _conditional_fields_build_form($type, $form['widget'], $form['field_name']['#value'], $controlled_fields, $available_fields, $allowed_values, 'field', $description);
  }
  return;
}

/**
 * Alteration of the fieldgroup editing form
 */
function conditional_fields_fieldgroup_group_edit_form(&$form) {
  if (!user_access('administer conditional fields')) {
    return;
  }
  
  // Find fields with allowed values which are not inside a group
  foreach ($form['#content_type']['fields'] as $field) {
    $in_group = fieldgroup_get_group($form['#content_type']['type'], $field['field_name']);
    if (!$in_group) {
      if ($allowed_values[$field['field_name']] = conditional_fields_allowed_values($field)) {
        $available_fields[$field['field_name']] = $field;
      }
    }
  }

  if (isset($available_fields)) {
    $form = _conditional_fields_build_form($form['#content_type'], $form, $form['group_name']['#default_value'], array(), $available_fields, $allowed_values, 'group');
    // Add extra validation funcion
    $form['#validate'][] = 'conditional_fields_content_admin_field_validate';
    // Add extra submission funcion
    $form['#submit'] = array_merge(array('conditional_fields_forms_submit'), $form['#submit']);
  }    
  return;
}

/**
 * This adds conditional fields settings in the field and fieldgroup editing forms.
 * Valid choices for $op are 'field' and 'group'
 */
function _conditional_fields_build_form($type, $form, $control_field, $controlled_fields, $available_fields, $allowed_values, $op, $description = NULL) {
  if (!$description) {
    $description = t('Choose which allowed values of available controlling fields will trigger this @context, making it visible both in node editing and view. If no value is set, the @context will be always visible. Only fields and groups within the same group as this one, and with Allowed values set, are available for control', array('@context' => t($op))) . $description;
  }
  
  $form['conditional_fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Conditional fields settings'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => $description,
    '#weight' => 8,
    '#attributes' => array('id' => 'conditional-fields-settings'),
  );
  
  if (empty($controlled_fields)) {  // Disallow nested conditional fields
    $default_values = conditional_fields_default_values($control_field, $available_fields);
    // Create selection lists
    
    foreach ($available_fields as $field) {
      $allowed_values[$field['field_name']] = array('conditional_field_no_value' => t('- Not controlling -')) + $allowed_values[$field['field_name']];
      $form['conditional_fields'][$field['field_name']] = array(
        '#type' => 'select',
        '#multiple' => TRUE,
        '#title' => t($field['widget']['label']),
        // To do: set right url for groups
        '#description' => t('<a href="@edit-field">Edit the allowed values</a> of the %field-name field.', array('@edit-field' => url('admin/content/node-type/' . $type['url_str'] . '/fields/' . $field['field_name'], array('query' => 'destination=admin/content/node-type/' . arg(3) . '/' . arg(4) . '/' . arg(5), 'fragment' => 'edit-allowed-values')), '%field-name' => t($field['widget']['label'])) ),
        '#options' => $allowed_values[$field['field_name']],
        '#default_value' => isset($default_values[$field['field_name']]) && $default_values[$field['field_name']] != FALSE ? $default_values[$field['field_name']] : 'conditional_field_no_value',
      );
    }
    
  }
  
  return $form;
}

/**
 * Check selection of values
 */
function conditional_fields_content_admin_field_validate($form, &$form_state) {  
  if ($form_state['values']['conditional_fields']) {
    foreach ($form_state['values']['conditional_fields'] as $available_field => $trigger_values) {
      // Disallow selecting Not set and values at the same time
      if ($trigger_values['conditional_field_no_value'] && count($trigger_values) > 1) {
        form_set_error('conditional_fields][' . $available_field, t("You cannot select 'Not controlling' and other values at the same time."));
      }
    }
  }
  else {
    // Warn user on allowed values change
    if (!empty($form['#controlled_fields']) && $form_state['values']['allowed_values'] != $form_state['#field_info'][$form['values']['field_name']]['allowed_values']) {
      drupal_set_message(t('If you removed one or more allowed values from the field, you might have to edit its controlled Conditional fields and/or fieldgroups settings.'), 'error');
    }
  }
}


/**
 * Handle saving of conditional field settings.
 * The controlled field can be either a field or a group
 */
function conditional_fields_forms_submit($form, &$form_state) {

  isset($form_state['values']['field_name']) ? $controlled_field = $form_state['values']['field_name'] : $controlled_field = $form_state['values']['group_name'];
  isset($form['#field']['type_name']) ? $type = $form['#field']['type_name'] : $type = $form['#content_type']['type'];
  
  foreach ($form_state['values']['conditional_fields'] as $controlling_field => $trigger_values) {
    // If the row already exists
    if (db_result(db_query("SELECT COUNT(*) FROM {conditional_fields} WHERE control_field_name = '%s' AND field_name = '%s' AND type = '%s'", $controlling_field, $controlled_field, $type))) {
      // If no value is set, delete the entry, else update it
      if (empty($trigger_values) || $trigger_values['conditional_field_no_value']) {
        db_query("DELETE FROM {conditional_fields} WHERE control_field_name = '%s' AND field_name = '%s' AND type = '%s'", $controlling_field, $controlled_field, $type);
      }
      else {
        db_query("UPDATE {conditional_fields} SET trigger_values = '%s' WHERE control_field_name = '%s' AND field_name = '%s' AND type = '%s'", serialize($trigger_values), $controlling_field, $controlled_field, $type);
      }
    }
    else {
      // If values are set, create new entry
      if (!empty($trigger_values) && !$trigger_values['conditional_field_no_value']) {
        db_query("INSERT INTO {conditional_fields} (control_field_name, field_name, type, trigger_values) VALUES ('%s', '%s', '%s', '%s')", $controlling_field, $controlled_field, $type, serialize($trigger_values));
      }
    }    
  }
}

/**
 * Alteration of the node editing form
 */
function conditional_fields_node_editing_form(&$form) {
  $type_name = $form['type']['#value'];
  
  // Do nothing if there are no conditional fields
  if (!$data = conditional_fields_load_data($type_name)) {
    return;
  }
  
  // Apply oprhaned fields settings
  switch (variable_get('c_fields_edit_' . $type_name, C_FIELDS_ORPHANED_SHOW_TRIGGERED)) {
    case C_FIELDS_ORPHANED_SHOW_TRIGGERED:
      // We will only hide untriggered fields
      $show_triggered = TRUE;
    case C_FIELDS_ORPHANED_HIDE:
      // Hide controlled fields whose controlling field is not present
      foreach ($data as $field) {
        // Check if the controlling field is in a group
        if (module_exists('fieldgroup')) {
          $group = fieldgroup_get_group($type_name, $field['control_field_name']);
        }
        // Check if the controlling field is in form
        // If not, unset controlled field
        if ($group) {
          if (!$form[$group][$field['control_field_name']]  || $form[$group][$field['control_field_name']]['#type'] == 'markup') {
            if (!$show_triggered || !in_array($form['#node']->{$field['control_field_name']}[0]['value'], $field['trigger_values'])) {
              unset($form[$group][$field['field_name']]);
            }
          }
        }
        else if ($group == FALSE) {
          if (!$form[$field['control_field_name']] || $form[$field['control_field_name']]['#type'] == 'markup') {
            if (!$show_triggered || !in_array($form['#node']->{$field['control_field_name']}[0]['value'], $field['trigger_values'])) {
              unset($form[$field['field_name']]);
            }
          }
        }
      }
      break;
    case C_FIELDS_ORPHANED_SHOW_ALL:
      // Do nothing: the default behavior is ok
      break;
  }
  
  // We build a javascript variable:
  // - 'controlling_fields' -> An object contaninig all ids of controlling fields, with their controlled fields and groups
  // To do: look if we should make this themeable
  foreach ($data as $row) {
    // Add javascript settings for this field
    $settings['controlling_fields']['#conditional-' . conditional_fields_form_clean_id($row['control_field_name'])]['#conditional-' . conditional_fields_form_clean_id($row['field_name'])] = array('field_id' => '#conditional-' . conditional_fields_form_clean_id($row['field_name']), 'trigger_values' => $row['trigger_values']);
    // To do: feature, add an array of controlled fields to js to allow for multiple controlling fields for a field.
    
    // Build helper arrays
    $controlling_fields[$row['control_field_name']] = $row['control_field_name'];
    $controlled_fields[$row['field_name']] = $row['field_name'];
  }
  
  // Controlled fields and fields inside controlled groups should only be required when user triggers them.
  // Since required input check is hardcoded in _form_validate, we need to unset it here.
  // We will check triggered fields in a custom validation form.
  // Here we also add enclosing divs for easier javascript handling to controlling fields and to controlled fields and groups
  $required_fields = array();
    
  foreach (element_children($form) as $element) {
    // Fields
    if (substr($element, 0, 6) == 'field_') {
      if ($controlling_fields[$element]) {
        $form[$element]['#controlling_field'] = $element;
        $form[$element]['#theme'] = 'conditional_fields_form_item';
      }
      else if ($controlled_fields[$element]) {
        if ($form[$element]['#required']) {
          conditional_fields_unset_required_field($form[$element]);
          $required_fields[$element] = array('field' => $element);
        }
        $form[$element]['#controlled_field'] = $element;
        $form[$element]['#theme'] = 'conditional_fields_form_item';
      }
    }
    else if (substr($element, 0, 6) == 'group_') {
      // Groups
      if ($controlled_fields[$element]) {
        // Group markup is still hardcoded.
        $form[$element]['#prefix'] = '<div id="conditional-' . conditional_fields_form_clean_id($element) . '" class="conditional-field controlled-field">';
        $form[$element]['#suffix'] = '</div>';
      }
      // Fields in groups
      foreach (element_children($form[$element]) as $group_element) {
        if ($controlled_fields[$element] || $controlled_fields[$group_element]) {
          if (conditional_fields_unset_required_field($form[$element][$group_element])) {
            $required_fields[$group_element] = array('field' => $group_element, 'in_group' => $element);
          }
        }
        if ($controlling_fields[$group_element]) {
          $form[$element][$group_element]['#controlling_field'] = $group_element;
          $form[$element][$group_element]['#theme'] = 'conditional_fields_form_item';
        }
        else if ($controlled_fields[$group_element]) {
          $form[$element][$group_element]['#controlled_field'] = $group_element;
          $form[$element][$group_element]['#theme'] = 'conditional_fields_form_item';
        }
      }          
    }
  }
  
  // Pass variables for validation
  $form['#conditional_fields']['data'] = $data;
  $form['#conditional_fields']['required_fields'] = $required_fields;
    
  // Add extra validation funcion
  $form['#validate'] = array_merge(array('conditional_fields_node_editing_form_validate'), (array)$form['#validate']);

  // Apply user interface settings
  $ui_settings = variable_get('c_fields_js_' . $type_name, C_FIELDS_JS_HIDE);
  switch ($ui_settings) {
    case C_FIELDS_JS_DISABLE:
      $settings['ui_settings'] = 'disable';
      conditional_fields_add_js($settings);
      break;
    case C_FIELDS_JS_HIDE:
      $settings['ui_settings']['animation'] = (int)variable_get('c_fields_animation_' . $type_name, C_FIELDS_ANIMATION_NO);
      $settings['ui_settings']['anim_speed'] = variable_get('c_fields_anim_speed_' . $type_name, "normal");
      conditional_fields_add_js($settings);
      break;
  }
}

/**
 * Unset the #required property and set a #required_field property for internal use.
 */
function conditional_fields_unset_required_field(&$field) {
  if ($field['#required']) {
    unset($field['#required']);
    $field['#required_field'] = TRUE;
  }
  foreach (element_children($field) as $child) {
    conditional_fields_unset_required_field($field[$child]);
  }
}

/**
 * Validation for node editing form.
 */
function conditional_fields_node_editing_form_validate($form, $form_state) {
  $required_fields = $form['#conditional_fields']['required_fields'];
  
  if (!empty($required_fields)) {
    foreach ($form['#conditional_fields']['data'] as $row) {
      // Check if the controlling field was triggered
      if ($required_fields[$row['field_name']] && conditional_fields_is_triggered($form_state['values'][$row['control_field_name']], $row['trigger_values'])) {
        // Check if the controlled field is empty
        if (conditional_fields_check_empty($form_state['values'][$row['field_name']])) {
          // Check whether the controlled field is in a group or not
          if (!isset($required_fields[$row['field_name']]['in_group'])) {
            // Set error
            form_error($form[$row['field_name']], t('!name field is required.', array('!name' => $form[$row['field_name']]['#title'])));
          }
          else {
            // Set error
            form_error($form[$required_fields[$row['field_name']]['in_group']][$row['field_name']], t('!name field is required.', array('!name' => $form[$required_fields[$row['field_name']]['in_group']][$row['field_name']]['#title'])));
          }
        }
      }
    }
  }
  
  // This is to catch remaining fields (required fields in controlled groups)
  foreach ($required_fields as $field_in_group) {
    if (!$control_field || $control_field['field_name'] != $field_in_group['in_group']) {
      $control_field = db_fetch_array(db_query("SELECT control_field_name, field_name, trigger_values FROM {conditional_fields} WHERE field_name = '%s' AND type = '%s'", $field_in_group['in_group'], $form_state['type']));
    }
    if ($control_field && conditional_fields_is_triggered($form_state['values'][$control_field['control_field_name']], unserialize($control_field['trigger_values']))) {
      // Check if the controlled field in the group is empty
      if (conditional_fields_check_empty($form_state['values'][$control_field['field_name']])) {
        // Set error
        form_error($form[$field_in_group['in_group']][$field_in_group['field']], t('!name field is required.', array('!name' => $form[$field_in_group['in_group']][$field_in_group['field']]['#title'])));
      }
    }
  }
}

/**
 * Checks if a submitted field value is empty
 */
function conditional_fields_check_empty($field) {
  // Normal fields
  if (isset($field[0]['value'])) {
    $value = $field[0]['value'];
  }
  // Node reference
  else if (isset($field[0]['nid'])) {
    $value = $field[0]['nid'];
  }
  
  if (!count($value) || (is_string($value) && strlen(trim($value)) == 0)) {
    return TRUE;
  }
  
  return FALSE;
}

/**
 * Returns true if the field was triggered
 * $selected_values The values of the controlling field selected by the user when creating the node
 * $trigger_values An array containing the information we need to select the trigger values
 */
function conditional_fields_is_triggered($selected_values, $trigger_values) {
  foreach ((array)$selected_values as $values) {
    foreach ((array)$values as $value) {
      if ($value && in_array($value, $trigger_values)) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Returns an array of conditional fields settings for a given node type.
 * $structure can be either 'flat' or 'row' . 'row' data is data per row,
 * while 'flat' data is a list of both controlling and controlled fields.
 */
function conditional_fields_load_data($type, $structure = 'row', $reset = FALSE) {
  static $data;
  if ($reset) {
    unset($data);
  }
  if (!$data[$structure][$type]) {
    $data[$structure][$type] = array();
    if ($structure == 'row') {
      $query = db_query("SELECT control_field_name, field_name, trigger_values FROM {conditional_fields} WHERE type = '%s'", $type);
      while ($result = db_fetch_array($query)) {
        $result['trigger_values'] = unserialize($result['trigger_values']);
        $data['row'][$type][] = $result;
      }
    }
    else if ($structure == 'flat') {
      $query = db_query("SELECT control_field_name, field_name FROM {conditional_fields} WHERE type = '%s'", $type);
      while ($result = db_fetch_array($query)) {
        $data['flat'][$type][$result['control_field_name']] = $result['control_field_name'];
        $data['flat'][$type][$result['field_name']] = $result['field_name'];
      }
      $data['flat'][$type] = array_unique($data['flat'][$type]);
    }
    
  }
  return $data[$structure][$type];
}

/**
 * Find conditional fields and mark them.
 */
function conditional_fields_field_overview_form(&$form) {
  // Check if we have conditional data
  if (!$data = conditional_fields_load_data($form['#type_name'], 'flat')) {
    return;
  }

  // Mark fields
  foreach ($form['#fields'] as $field_name) {
    if ($data[$field_name]) {
      $form[$field_name]['label']['#value'] .= theme('conditional_fields_manage_marker');
    }
  }

  // Mark groups
  foreach ($form['#groups'] as $group_name) {
    if ($data[$group_name]) {
      $form[$group_name]['label']['#value'] .= theme('conditional_fields_manage_marker');
    }
  }
  
  // Add validation funcion
  $form['#conditional_fields'] = $data;
  $form['#validate'] = array_merge(array('conditional_fields_field_overview_form_validate'), $form['#validate']);

}

/**
 * Conditional fields can't change group.
 */
function conditional_fields_field_overview_form_validate($form, $form_state) {
  foreach ($form['#fields'] as $field_name) {
    if ($form['#conditional_fields'][$field_name] && $form_state['values'][$field_name]['parent'] != $form_state['values'][$field_name]['prev_parent']) {
      form_set_error('', t("You can't change the parent group of a conditional field."));
    }
  }
}

/**
 * Returns an array of fields and fieldgroups controlled by the field $fieldname.
 * $type is the content type name of the field
 */
function conditional_fields_get_control_fields($field_name, $type) {
  static $controlled_fields;
  if (!$controlled_fields[$type][$field_name]) {
    if ($type) {
      $query = db_query("SELECT field_name FROM {conditional_fields} WHERE control_field_name = '%s' AND type = '%s'", $field_name, $type);
    }
    else {
      $query = db_query("SELECT field_name FROM {conditional_fields} WHERE control_field_name = '%s'", $field_name);
    }
    if (module_exists('fieldgroup')) {
      $type_groups = array_keys(fieldgroup_groups($type));
    }
    $controlled_fields[$type][$field_name] = array('field' => array(), 'group' => array());
    while ($controlled_field = db_fetch_object($query)) {
      if ($type_groups) {
        in_array($controlled_field->field_name, $type_groups) ? $field_or_group = 'group' : $field_or_group = 'field';
      }
      else {
        $field_or_group = 'field';
      }
      $controlled_fields[$type][$field_name][$field_or_group][] = $controlled_field->field_name;
    }
  }
  return $controlled_fields[$type][$field_name];
}

/**
 * Load default values from conditional_fields table.
 */
function conditional_fields_default_values($control_field, $conditional_fields) {
  foreach ($conditional_fields as $field) {
    $query = db_query("SELECT trigger_values FROM {conditional_fields} WHERE control_field_name = '%s' AND field_name = '%s' AND type = '%s'", $field['field_name'], $control_field, $field['type_name']);
    $default_values[$field['field_name']] = unserialize(db_result($query));
  }
  return $default_values;
}

/**
 * Adds javascript to the node editing form
 */
function conditional_fields_add_js($settings) {
  drupal_add_js(array('ConditionalFields' => $settings), 'setting', 'header', FALSE, TRUE, FALSE);
  drupal_add_js(drupal_get_path('module', 'conditional_fields') . '/conditional_fields.js', 'module', 'header', FALSE, TRUE, FALSE);
}

/*
 * Clean conditional fields settings pertaining to this removed field
 */
function _conditional_fields_content_admin_field_remove_submit($form, $form_state) {
  conditional_fields_remove_field_settings($form_state['field_name']);
}

/*
 * Clean conditional fields settings pertaining to this removed group
 */
function _conditional_fields_fieldgroup_remove_group_submit($form, $form_state, $group_name) {
  conditional_fields_remove_field_settings($group_name);
}

/*
 * Remove all settings for a field.
 * Since our field names are really the field instance name, it should be safe to remove without checking.
 */
function conditional_fields_remove_field_settings($field_name) {
  db_query("DELETE FROM {conditional_fields} WHERE control_field_name = '%s' OR field_name = '%s'", $field_name, $field_name);
}

/**
 *  Implementation of hook_node_type()
 */
function conditional_fields_node_type($op, $info) {
  switch ($op) {
    case 'update':
      conditional_fields_node_type_update($info);
      break;
    case 'delete':
      conditional_fields_node_type_delete($info->type);
      break;
  }
}

/**
 * Update conditional fields to a new type name
 */
function conditional_fields_node_type_update($info) {
  if ($info->type != $info->old_type) {
    db_query("UPDATE {conditional_fields} SET type = '%s' WHERE type ='%s'", $info->type, $info->old_type);  

    // Update variables
    db_query("UPDATE {variable} SET name = 'c_fields_js_%s' WHERE name ='c_fields_js_%s'", $info->type, $info->old_type);
    db_query("UPDATE {variable} SET name = 'c_fields_animation_%s' WHERE name ='c_fields_animation_%s'", $info->type, $info->old_type);
    db_query("UPDATE {variable} SET name = 'c_fields_anim_speed_%s' WHERE name ='c_fields_anim_speed_%s'", $info->type, $info->old_type);
    db_query("UPDATE {variable} SET name = 'c_fields_show_all_%s' WHERE name ='c_fields_show_all_%s'", $info->type, $info->old_type);
    db_query("UPDATE {variable} SET name = 'c_fields_view_%s' WHERE name ='c_fields_view_%s'", $info->type, $info->old_type);
    db_query("UPDATE {variable} SET name = 'c_fields_edit_%s' WHERE name ='c_fields_edit_%s'", $info->type, $info->old_type);  
    cache_clear_all('variables', 'cache');

    drupal_set_message(t('Conditional Fields settings have been updated.'));
  }
}

/**
 * Remove conditional fields of a node type
 */
function conditional_fields_node_type_delete($type) {
  db_query("DELETE FROM {conditional_fields} WHERE type = '%s'", $type);

  // Delete variables
  variable_del('c_fields_js_' . $type);
  variable_del('c_fields_animation_' . $type);
  variable_del('c_fields_anim_speed_' . $type);
  variable_del('c_fields_show_all_' . $type);
  variable_del('c_fields_view_' . $type);
  variable_del('c_fields_edit_' . $type);
}


/**
 *  Create an array of the allowed values for a field
 */
function conditional_fields_allowed_values($field) {
  static $allowed_values;

  if ($allowed_values[$field['field_name']]) {
    return $allowed_values[$field['field_name']];
  }

  $allowed_values[$field['field_name']] = array();
  if ($field['allowed_values_php']) {
    ob_start();
    $result = eval($field['allowed_values_php']);
    if (is_array($result)) {
      $allowed_values[$field['field_name']] = $result;
    }
    ob_end_clean();
  }
  if (!$allowed_values[$field['field_name']]) {

    $list = explode("\n", $field['allowed_values']);
    $list = array_map('trim', $list);
    $list = array_filter($list, 'strlen');
    foreach ($list as $opt) {
      list($key, $value) = explode('|', $opt);
      $allowed_values[$field['field_name']][$key] = $value ? $value : $key;
    }
  }
  return $allowed_values[$field['field_name']];
}

/**
 * Implementation of hook_theme().
 */
function conditional_fields_theme() {
    return array(
        'conditional_fields_form_item' => array(
            'arguments' => array('item' => NULL),
        ),
        'conditional_fields_manage_marker' => array(
            'arguments' => array('label' => NULL),
        ),
    );
}

/**
 * Themes the wrappers around conditional fields.
 * Note that if you modify the id and classes of these fields,
 * you have to modify conditional_fields.js accordingly.
 */
function theme_conditional_fields_form_item($item) {
   if ($id = $item['#controlling_field']) {
     $output = '<div id="conditional-' . conditional_fields_form_clean_id($id) . '" class="conditional-field controlling-field">' . drupal_render($item) . '</div>';
   }
   else if ($id = $item['#controlled_field']) {
     if ($item['#required_field']) {
       $item = conditional_fields_set_required_field($item);
     }
     if ($item['#type'] == 'markup') {
       /* Avoid unnecessary divs in multiple fields */
       $item['#prefix'] = '<div id="conditional-' . conditional_fields_form_clean_id($id) . '" class="conditional-field controlled-field">';
       $item['#suffix'] = '</div>';
       $output = drupal_render($item); 
     }
     else {
       $output = '<div id="conditional-' . conditional_fields_form_clean_id($id) . '" class="conditional-field controlled-field">' . drupal_render($item) . '</div>';
     }
   }
   else {
     $output = drupal_render($item); 
   }
   return $output;
}

/**
 * Wrapper for conditional_fields_set_required_field_recurse
 */
function conditional_fields_set_required_field($item) { 
  conditional_fields_set_required_field_recurse($item);
  return $item;
};

/**
 * Recursive function to set required for all conditionally required fields.
 * This causes Drupal to render conditionally required fields in a way that
 * indicates they are required when visible.
 */
function conditional_fields_set_required_field_recurse(&$item) {
   $item['#required'] = TRUE;
   foreach (element_children($item) as $child) {
     conditional_fields_set_required_field_recurse($item[$child]);
   }
}

/**
 * Themes a conditional field marker in 'Manage fields'.
 */
function theme_conditional_fields_manage_marker($label = 'conditional') {
  return ' <span class="marker">' . t($label) . '</span>';
}

/**
 * form_clean_id in Drupal 6 adds a unique ID check, which messes things up here
 * Since fields have unique names anyway, we can safely use this wrapper (I hope).
 */
function conditional_fields_form_clean_id($id = NULL, $flush = FALSE) {
  $id = str_replace(array('][', '_', ' '), '-', $id);
  return $id;
}
